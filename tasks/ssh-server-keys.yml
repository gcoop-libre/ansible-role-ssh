---
- name: Generate Host Certificate Authority key pair
  command: ssh-keygen {{ ssh_keygen_extra_params }} -t rsa -b {{ ssh_keygen_bits_rsa }} -N '{{ ssh_server_ca_passphrase }}' -C "Host Certificate Authority" -f {{ ssh_ca_path }}/{{ ssh_server_ca }}
  args:
    creates: "{{ ssh_ca_path }}/{{ ssh_server_ca }}"
  delegate_to: localhost
  become: no
  when: ssh_server_ca | length > 0

- name: Get host FQDN
  command: hostname --fqdn
  register: ssh_server_hostname_fqdn
  changed_when: False

- name: Get principals for the host certificate
  shell: "echo `hostname`,`hostname --fqdn`,`hostname -I | tr ' ' ',' | sed s/,$//g`"
  register: ssh_server_hostname_principals
  changed_when: False

- include: "{{ role_path }}/tasks/ssh-server-generate-key.yml"
  vars:
    hostname_fqdn: "{{ ssh_server_hostname_fqdn.stdout }}"
    key_type: "{{ ssh_server_host_key.type }}"
    key_bits: "{{ ssh_server_host_key.bits }}"
    key_path: "{{ ssh_keygen_keys_path }}"
    key_file: "{{ ssh_server_host_key.file }}"
    cert_regenerate: "{{ ssh_server_certificate_regenerate }}"
    cert_principals: "{{ ssh_server_hostname_principals.stdout }}"
    cert_validity: "{{ ssh_server_certificate_validity }}"
    ca_key: "{% if ssh_server_ca | length > 0 %}{{ ssh_ca_path }}/{{ ssh_server_ca }}{% endif %}"
    ca_passphrase: "{{ ssh_server_ca_passphrase }}"
    extra_params: "{{ ssh_keygen_extra_params }}"
  static: false
  with_items: "{{ ssh_server_host_keys }}"
  loop_control:
    loop_var: ssh_server_host_key
    label: "{{ ssh_server_host_key.type }}"
  when: ssh_server_host_key.generate
